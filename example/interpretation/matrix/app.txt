PROG

type matrix: array[0:9, 0:9] of int;

var mat1: matrix;
var mat2: matrix;
var result: matrix;

var max_dimensions : int;
var rows: int;
var cols: int;

var i: int;
var j: int;
var k: int;

var choice: int;

proc input_matrix(matrix_id: int) {
    if (matrix_id == 1) {
        print("\n");
        print("    .===============================================.\n");
        print("    |               ENTER MATRIX 1                  |\n");
        print("    |===============================================|\n");
        print("    |  Dimensions: (%d x %d)                          |\n", rows, cols);
        print("    '==============================================='\n");
    } 
    if (matrix_id == 2) {
        print("\n");
        print("    .===============================================.\n");
        print("    |               ENTER MATRIX 2                  |\n");
        print("    |===============================================|\n");
        print("    |  Dimensions: (%d x %d)                          |\n", rows, cols);
        print("    '==============================================='\n");
    }

    i := 0;
    while (i < rows) {
        j := 0;
        while (j < cols) {
            if (matrix_id == 1) {
                print("     Enter value for Matrix 1 [%d][%d]: ", i + 1, j + 1);
                input("%d", mat1[i, j]);
            } 
            if (matrix_id == 2) {
                print("     Enter value for Matrix 2 [%d][%d]: ", i + 1, j + 1);
                input("%d", mat2[i, j]);
            }
            j := j + 1;
        }
        i := i + 1;
    }

    print("\n");
    print("    .----------\n");
    print("    | Matrix %d successfully entered!\n", matrix_id);
    print("    .===============================================.\n");
    print("\n");
}

// -------------------------------------------- //
// ------------- MATRIX OPERATIONS ----------- // 
// -------------------------------------------- //


proc add_matrices() {
    i := 0;
    while (i < rows) {
        j := 0;
        while (j < cols) {
            result[i, j] := mat1[i, j] + mat2[i, j];
            j := j + 1;
        }
        i := i + 1;
    }
}

proc subtract_matrices() {
    i := 0;
    while (i < rows) {
        j := 0;
        while (j < cols) {
            result[i, j] := mat1[i, j] - mat2[i, j];
            j := j + 1;
        }
        i := i + 1;
    }
}

proc multiply_matrices() {
    i := 0;
    while (i < rows) {
        j := 0;
        while (j < cols) {
            result[i, j] := 0;
            k := 0;
            while (k < cols) {
                result[i, j] := result[i, j] + (mat1[i, k] * mat2[k, j]);
                k := k + 1;
            }
            j := j + 1;
        }
        i := i + 1;
    }
}


func is_multiplication_possible() -> bool {
    var is_possible : bool;
    is_possible := false;
    if (rows == cols) {
        is_possible := true;
    }

    return is_possible;
}

proc display_matrix(matrix_id: int, operation: char, other_matrix_id: int, show_result: bool) {
    var i : int;
    var j : int;

    var calcule : int;

    var max_value1 : int;
    var max_value2 : int;
    var max_value3 : int;
    var width1 : int;
    var width2 : int;
    var width3 : int;
    var temp : int;
    var num_digits : int;

    var value: int;
    var calc2 : int;

    // Initialize max values
    max_value1 := -99999;
    max_value2 := -99999;
    max_value3 := -99999;

    // Calculate max value for the first matrix
    i := 0;
    while (i < rows) {
        j := 0;
        while (j < cols) {
            if (matrix_id == 1) { value := mat1[i, j]; }
            if (matrix_id == 2) { value := mat2[i, j]; }
            if (matrix_id == 3) { value := result[i, j]; }
            if (value > max_value1) { max_value1 := value; }
            j := j + 1;
        }
        i := i + 1;
    }

    // Calculate max value for the second matrix (if applicable)
    if (other_matrix_id > 0) {
        i := 0;
        while (i < rows) {
            j := 0;
            while (j < cols) {
                if (other_matrix_id == 1) { value := mat1[i, j]; }
                if (other_matrix_id == 2) { value := mat2[i, j]; }
                if (value > max_value2) { max_value2 := value; }
                j := j + 1;
            }
            i := i + 1;
        }
    }

    // Calculate max value for the result matrix (if applicable)
    if (show_result == true) {
        i := 0;
        while (i < rows) {
            j := 0;
            while (j < cols) {
                value := result[i, j];
                if (value > max_value3) { max_value3 := value; }
                j := j + 1;
            }
            i := i + 1;
        }
    }

    // Compute widths for each matrix
    width1 := 0;
    temp := max_value1;
    while (temp > 0) {
        width1 := width1 + 1;
        temp := temp / 10;
    }
    width1 := width1 + 2; // Add padding

    width2 := 0;
    if (other_matrix_id > 0) {
        temp := max_value2;
        while (temp > 0) {
            width2 := width2 + 1;
            temp := temp / 10;
        }
        width2 := width2 + 2; // Add padding
    }

    width3 := 0;
    if (show_result == true) {
        temp := max_value3;
        while (temp > 0) {
            width3 := width3 + 1;
            temp := temp / 10;
        }
        width3 := width3 + 2; // Add padding
    }

    // Display top borders
    calcule := width1 * cols + 1;

    print("┌");
    i := 0;
    while (i < calcule) {
        print(" ");
        i := i + 1;
    }
    print("┐");

    if (other_matrix_id > 0) {
        calcule := width2 * cols + 1;
        print("   ┌");
        i := 0;
        while (i < calcule) {
            print(" ");
            i := i + 1;
        }
        print("┐");
    }

    if (show_result == true) {
        calcule := width3 * cols + 1;
        print("   ┌");
        i := 0;
        while (i < calcule) {
            print(" ");
            i := i + 1;
        }
        print("┐");
    }
    print("\n");

    // Display matrices and operation
    i := 0;
    while (i < rows) {
        // Display first matrix
        print("│ ");
        j := 0;
        while (j < cols) {
            if (matrix_id == 1) { value := mat1[i, j]; }
            if (matrix_id == 2) { value := mat2[i, j]; }
            if (matrix_id == 3) { value := result[i, j]; }

            // Align and print value
            temp := value;
            num_digits := 0;
            if (temp == 0) { num_digits := 1; }
            else {
                while (temp > 0) {
                    num_digits := num_digits + 1;
                    temp := temp / 10;
                }
            }
            temp := width1 - num_digits - 1;
            while (temp > 0) {
                print(" ");
                temp := temp - 1;
            }
            print("%d ", value);
            j := j + 1;
        }
        print("│");

        // Display operation and second matrix (if applicable)
        if (other_matrix_id > 0) {
            calc2 := rows / 2;
            if (i == calc2) { print(" %c ", operation); }
            else { print("   "); }

            print("│ ");
            j := 0;
            while (j < cols) {
                if (other_matrix_id == 1) { value := mat1[i, j]; }
                if (other_matrix_id == 2) { value := mat2[i, j]; }

                // Align and print value
                temp := value;
                num_digits := 0;
                if (temp == 0) { num_digits := 1; }
                else {
                    while (temp > 0) {
                        num_digits := num_digits + 1;
                        temp := temp / 10;
                    }
                }
                temp := width2 - num_digits - 1;
                while (temp > 0) {
                    print(" ");
                    temp := temp - 1;
                }
                print("%d ", value);
                j := j + 1;
            }
            print("│");
        }

        // Display result matrix (if applicable)
        if (show_result == true) {
            calc2 := rows / 2;
            if (i == calc2) { print(" = "); }
            else { print("   "); }

            print("│ ");
            j := 0;
            while (j < cols) {
                value := result[i, j];

                // Align and print value
                temp := value;
                num_digits := 0;
                if (temp == 0) { num_digits := 1; }
                else {
                    while (temp > 0) {
                        num_digits := num_digits + 1;
                        temp := temp / 10;
                    }
                }
                temp := width3 - num_digits - 1;
                while (temp > 0) {
                    print(" ");
                    temp := temp - 1;
                }
                print("%d ", value);
                j := j + 1;
            }
            print("│");
        }
        print("\n");
        i := i + 1;
    }

    // Display bottom borders
    print("└");
    i := 0;
    calc2 := width1 * cols + 1;
    while (i < calc2) {
        print(" ");
        i := i + 1;
    }
    print("┘");

    if (other_matrix_id > 0) {
        print("   └");
        i := 0;
        calc2 := width2 * cols + 1;
        while (i < calc2) {
            print(" ");
            i := i + 1;
        }
        print("┘");
    }

    if (show_result == true) {
        print("   └");
        i := 0;
        calc2 := width3 * cols + 1;
        while (i < calc2) {
            print(" ");
            i := i + 1;
        }
        print("┘");
    }
    print("\n");
}

proc input_dimensions() {
    print("\n");
    print("    .===============================================.\n");
    print("    |              MATRIX DIMENSIONS               |\n");
    print("    |===============================================|\n");
    print("    |                                               |\n");
    print("    |   Enter the number of rows and columns for    |\n");
    print("    |   the matrices. Maximum size is %d x %d.      |\n", max_dimensions, max_dimensions);
    print("    |                                               |\n");
    print("    '===============================================\n");

    print("\n    Enter the number of rows (max %d): ", max_dimensions);
    input("%d", rows);
    if (rows > max_dimensions) {
        print("\n    Exceeds maximum limit! Setting rows to 3.\n");
        rows := 3;
    } 
    if (rows <= 0) {
        print("\n    Invalid value! Setting rows to 1.\n");
        rows := 1;
    }

    print("    Enter the number of columns (max %d): ", max_dimensions);
    input("%d", cols);
    if (cols > max_dimensions) {
        print("\n    Exceeds maximum limit! Setting columns to 3.\n");
        cols := 3;
    } 
    if (cols <= 0) {
        print("\n    Invalid value! Setting columns to 1.\n");
        cols := 1;
    }

    print("\n");
    print("    .===============================================.\n");
    print("    |      Matrix dimensions set to: %d x %d         |\n", rows, cols);
    print("    '===============================================\n");
    print("\n");
}


// -------------------------------------------- //
// ------------- DISPLAY PROCEDURE ----------- // 
// -------------------------------------------- //

proc display_hello() {
    print("\n");
    print("    -----------------------------------------\n");
    print("   /                                         \\\n");
    print("  |          WELCOME TO THE MATRIX            |\n");
    print("  |            OPERATIONS PROGRAM             |\n");
    print("  |                                           |\n");
    print("  |        Simplify Your Math Effortlessly    |\n");
    print("  |                                           |\n");
    print("   \\_________________________________________/\n");
    print("    -----------------------------------------\n");
    print("\n");
}

proc display_menu() {
    print("\n");
    print("    .===============================================.\n");
    print("    |                MATRIX OPERATIONS              |\n");
    print("    |===============================================|\n");
    print("    |                                               |\n");
    print("    |  [1] Add Matrices                             |\n");
    print("    |  [2] Subtract Matrices                        |\n");
    print("    |  [3] Multiply Matrices                        |\n");
    print("    |  [4] Enter New Matrices                       |\n");
    print("    |  [5] Exit                                     |\n");
    print("    |                                               |\n");
    print("    '==============================================='\n");
    print("\n");
    print("     Enter your selection [1-5] >> ");
}

proc display_error() {
    print("\n");
    print("    .===============================================.\n");
    print("    |                   ERROR                       |\n");
    print("    |===============================================|\n");
    print("    |                                               |\n");
    print("    |  Invalid selection! Please choose 1-5.        \n");
    print("    |                                               |\n");
    print("    '==============================================='\n");
    print("\n");
}

proc display_end() {
     print("\n");
        print("    .===============================================.\n");
        print("    |               PROGRAM TERMINATED              |\n");
        print("    |===============================================|\n");
        print("    |                                               |\n");
        print("    |        Thank you for using our Calculator     |\n");
        print("    |                                               |\n");
        print("    |              Have a great day!                |\n");
        print("    |                                               |\n");
        print("    '==============================================='\n");
        print("\n");
}

proc main() {
    choice := 0;
    while (choice != 5) {
        display_menu();
        input("%d", choice);

        if (choice == 1) {
            add_matrices();
            print("\n    --------------------------------\n");
            print("           Result of Addition");
            print("\n    --------------------------------\n");

            display_matrix(1, '+', 2, true);
        }
        if (choice == 2) {
            subtract_matrices();
            print("\n    --------------------------------\n");
            print("          Result of Subtraction");
            print("\n    --------------------------------\n");

            display_matrix(1, '-', 2, true);
        }
        if (choice == 3) {
            if (is_multiplication_possible() == true) {
                multiply_matrices();
                print("\n    --------------------------------------\n");
                print("           Result of Multiplication");
                print("\n    --------------------------------------\n");

                display_matrix(1, '*', 2, true);
            } else {
                print("    Error impossible to multiply matrices of dimension (%d,%d) x (%d,%d)\n", rows, cols, rows, cols);
            }
        }
        if (choice == 4) {
            print("\n    Re-entering matrices:\n");
            input_dimensions();
            input_matrix(1);
            input_matrix(2);
        }
        if (choice == 5) {
            display_end();
        }
        if ((choice < 1) || (choice > 5)) {
            display_error();
        }
    }
}

// Main Program
display_hello();

max_dimensions := 9;
input_dimensions();
input_matrix(1);
input_matrix(2);

// Launch app main loop
main();


PROG

type matrix : array[0:4, 0:5] of int;

var mat1 : matrix;
var dim1 : int;
var dim2 : int;

proc display_matrix() {
    var i : int;
    var j : int;
    var max_value : int;
    var width : int;
    var temp : int;
    var num_digits : int;
    var calcule : int;

    // Find the largest value in the matrix for spacing calculation
    max_value := mat1[0, 0];
    i := 0;
    while (i < dim1) {
        j := 0;
        while (j < dim2) {
            if (mat1[i, j] > max_value) {
                max_value := mat1[i, j];
            }
            j := j + 1;
        }
        i := i + 1;
    }

    // Calculate the width needed for each number (max digits in the largest value)
    width := 0;
    temp := max_value;
    while (temp > 0) {
        width := width + 1;
        temp := temp / 10;
    }
    width := width + 2; // Add extra padding for cleaner separation

    // Calculate the total width of the matrix
    calcule := width * dim2 + 1; // Includes spaces between columns and borders

    // Display the top border
    print("┌");
    i := 0;
    while (i < calcule) {
        print(" ");
        i := i + 1;
    }
    print(" ┐\n");

    // Display the matrix content
    i := 0;
    while (i < dim1) {
        print("│ ");
        j := 0;
        while (j < dim2) {
            // Calculate the number of digits for the current number
            temp := mat1[i, j];
            num_digits := 0;
            if (temp == 0) {
                num_digits := 1; // Handle the case for zero
            } else {
                while (temp > 0) {
                    num_digits := num_digits + 1;
                    temp := temp / 10;
                }
            }

            // Print spaces for alignment
            temp := width - num_digits - 1; // Account for one space after the number
            while (temp > 0) {
                print(" ");
                temp := temp - 1;
            }

            // Print the value
            print("%d ", mat1[i, j]);
            j := j + 1;
        }
        print(" │\n");
        i := i + 1;
    }

    // Display the bottom border
    print("└");
    i := 0;
    while (i < calcule) {
        print(" ");
        i := i + 1;
    }
    print(" ┘\n");
}

proc init_matrix() {
    mat1[0, 0] := 12; mat1[0, 1] := 123; mat1[0, 2] := 4; mat1[0, 3] := 56; mat1[0, 4] := 789;
    mat1[1, 0] := 5; mat1[1, 1] := 6789; mat1[1, 2] := 345; mat1[1, 3] := 23; mat1[1, 4] := 9;
    mat1[2, 0] := 42; mat1[2, 1] := 3; mat1[2, 2] := 21; mat1[2, 3] := 567; mat1[2, 4] := 0;
    mat1[3, 0] := 890; mat1[3, 1] := 678; mat1[3, 2] := 456; mat1[3, 3] := 234; mat1[3, 4] := 12;
}

// Main program
dim1 := 4; dim2 := 5;

// Initialize matrix values
init_matrix();

// Display results
print("Matrix:\n");
display_matrix();

{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "argonaut",
    "patterns": [
        { "include": "#keywords" },
        { "include": "#comments" },
        { "include": "#constants" },
        { "include": "#type-declarations" },
        { "include": "#functions" },
        { "include": "#types" },
        { "include": "#variables" },
        { "include": "#numbers" },
        { "include": "#operators" },
        { "include": "#strings" }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.argonaut",
                    "match": "\\b(if|while|for|return|else|break|continue|PROG)\\b"
                },
                {
                    "name": "keyword.other.argonaut",
                    "match": "\\b(var|type|of)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.argonaut",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.argonaut",
                            "match": "\\\\[\\\\\"nrt%]"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.argonaut",
                    "match": "'[^']'"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.argonaut",
                    "match": "//.*$"
                }
            ]
        },
        "type-declarations": {
            "patterns": [
                {
                    "name": "meta.type.declaration.argonaut",
                    "begin": "\\b(type)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*:",
                    "end": "(?=;)",
                    "beginCaptures": {
                        "1": { "name": "keyword.other.type.argonaut" },
                        "2": { "name": "entity.name.type.custom.argonaut" }
                    },
                    "patterns": [
                        { "include": "#types" },
                        { "include": "#keywords" }
                    ]
                },
                {
                    "name": "meta.type.declaration.array.argonaut",
                    "begin": "\\b(type)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*:\\s*array\\[([0-9]+:[0-9]+)\\]\\s+of\\s+([a-zA-Z][a-zA-Z0-9_]*)\\b",
                    "end": "(?=;)",
                    "beginCaptures": {
                        "1": { "name": "keyword.other.type.argonaut" },
                        "2": { "name": "entity.name.type.custom.argonaut" },
                        "3": { "name": "constant.numeric.integer.argonaut" },
                        "4": { "name": "storage.type.argonaut" }
                    }
                },
                {
                    "name": "meta.type.declaration.struct.argonaut",
                    "begin": "\\b(type)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*:\\s*struct\\s*\\{",
                    "end": "\\}",
                    "beginCaptures": {
                        "1": { "name": "keyword.other.type.argonaut" },
                        "2": { "name": "entity.name.type.custom.argonaut" }
                    },
                    "patterns": [
                        { "include": "#variables" }
                    ]
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "meta.function.argonaut",
                    "begin": "\\b(func|proc)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "1": { "name": "storage.type.function.argonaut" },
                        "2": { "name": "entity.name.function.argonaut" }
                    },
                    "patterns": [
                        {
                            "match": "\\b([a-zA-Z][a-zA-Z0-9_]*)\\s*:\\s*([a-zA-Z][a-zA-Z0-9_]*)\\b",
                            "captures": {
                                "1": { "name": "variable.parameter.argonaut" },
                                "2": { "name": "storage.type.argonaut" }
                            }
                        },
                        { "include": "#types" }
                    ]
                },
                {
                    "name": "meta.function.call.argonaut",
                    "match": "\\b([a-zA-Z][a-zA-Z0-9_]*)\\s*\\(",
                    "captures": {
                        "1": { "name": "entity.name.function.argonaut" }
                    }
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "meta.variable.declaration.argonaut",
                    "match": "\\b(var)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*:\\s*([a-zA-Z][a-zA-Z0-9_]*)\\b",
                    "captures": {
                        "1": { "name": "storage.type.var.argonaut" },
                        "2": { "name": "variable.other.argonaut" },
                        "3": { "name": "entity.name.type.argonaut" }
                    }
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "storage.type.builtin.argonaut",
                    "match": "\\b(int|float|bool|char|string)\\b"
                },
                {
                    "name": "storage.type.struct.argonaut",
                    "match": "\\b(struct|fstruct|array|print|input)\\b"
                },
                {
                    "name": "entity.name.type.custom.argonaut",
                    "match": "\\b(date|arr|student)\\b"
                }
            ]
        },
       "numbers": {
			"patterns": [
				{
					"name": "constant.numeric.float.argonaut",
                    "match": "-?\\d+\\.\\d*"
				},
				{
					"name": "constant.numeric.integer.argonaut",
					"match": "(?<=^|\\W)-?[0-9][0-9]*"
				}
			]
		},
        "operators": {
            "patterns": [
                { "name": "keyword.operator.assignment.argonaut", "match": ":=" },
                { "name": "keyword.operator.arithmetic.argonaut", "match": "\\+\\+|--|[+\\-*/%]" },
                { "name": "keyword.operator.comparison.argonaut", "match": "==|!=|<=|>=|<|>" },
                { "name": "keyword.operator.logical.argonaut", "match": "&&|\\|\\||!" },
                { "name": "keyword.operator.return.argonaut", "match": "->" }
            ]
        },
        "constants": {
            "patterns": [
                { "name": "constant.language.boolean.argonaut", "match": "\\b(true|false)\\b" }
            ]
        }
    },
    "scopeName": "source.argonaut"
}
